{
  parserClass="com.prezi.intellij.spaghetti.parser.SpaghettiModuleParser"
  parserUtilClass="com.prezi.intellij.spaghetti.parser.SpaghettiModuleParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SpaghettiModule"
  psiImplClassSuffix="Impl"
  psiPackage="com.prezi.intellij.spaghetti.psi"
  psiImplPackage="com.prezi.intellij.spaghetti.psi.impl"

  elementTypeHolderClass="com.prezi.intellij.spaghetti.psi.SpaghettiModuleTypes"
  elementTypeClass="com.prezi.intellij.spaghetti.psi.SpaghettiModuleElementType"
  tokenTypeClass="com.prezi.intellij.spaghetti.psi.SpaghettiModuleTokenType"

  psiImplUtilClass="com.prezi.intellij.spaghetti.psi.impl.SpaghettiModulePsiImplUtil"

  tokens=[
  	COMMENT = 'regexp:(/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/)|(//.*)'
  	OPTIONAL = '?'
    PL='('
    PR=')'
  	CL = '{'
  	CR = '}'
  	AS = 'as'
  	const = 'const'
	module = 'module'
	import = 'import'
	extern = 'extern'
	extends = 'extends'
	interface = 'interface'
	struct = 'struct'
	enum = 'enum'
  	void = 'void'
  	any = 'any'
  	bool = 'bool'
  	int = 'int'
  	float = 'float'
  	string = 'string'
  	true = 'true'
  	false = 'false'
    intValue='regexp:\d+'
  	floatValue='regexp:\d+(\.\d*)'
  	ID = 'regexp:\w*'
    stringValue="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

SpaghettiModuleDefinition ::=
//	comment?
	annotations?
	'module' moduleSpec
	moduleElement*

moduleSpec ::= qualifiedName (AS ID)?

moduleElement ::= importDeclaration | externTypeDefinition | typeDefinition | moduleMethodDefinition

importDeclaration ::= import qualifiedName (AS ID)?

externTypeDefinition ::= annotations? extern interface qualifiedName

typeDefinition ::= interfaceDefinition | structDefinition | constDefinition | enumDefinition

interfaceDefinition ::=
 	annotations?
	interface ID typeParameters?
	( extends superInterfaceDefinition ( ',' superInterfaceDefinition )* )?
	'{' interfaceMethodDefinition* '}' {mixin="com.prezi.intellij.spaghetti.psi.impl.SpaghettiModuleNamedElementImpl"
       implements="com.prezi.intellij.spaghetti.psi.SpaghettiModuleNamedElement" methods=[getName getNameIdentifier setName]}


structDefinition ::=
	annotations?
	struct ID typeParameters?
	'{' propertyDefinition* '}'

constDefinition ::= annotations? const ID '{' constEntry* '}'

constEntry ::= annotations? constEntryDecl

constEntryDecl ::=
	bool? ID '=' boolValue
	| int? ID '=' intValue
	| float? ID '=' floatValue
	| string? ID '=' stringValue

enumDefinition ::= annotations? 'enum' ID '{'	enumValue* '}'

enumValue ::= annotations? ID

propertyDefinition ::= annotations?	OPTIONAL? typeNamePair

superInterfaceDefinition ::= qualifiedName typeArguments?

interfaceMethodDefinition ::= annotations? methodDefinition

moduleMethodDefinition ::= annotations? methodDefinition

methodDefinition ::= annotations? typeParameters? returnType ID '(' methodParameters? ')'

methodParameters ::= methodParameter ( ',' methodParameter )*

methodParameter	::= OPTIONAL? typeNamePair

typeNamePair ::= complexType ID

complexType ::= typeChain | type

type ::= primitiveType ArrayQualifier* | objectType ArrayQualifier*

typeChain ::=  typeChainElements | '(' typeChainElements ')' ArrayQualifier+

typeChainElements ::= typeChainArguments '->' typeChainReturnType

typeChainArguments ::= typeChainElement ( '->' typeChainElement &('->' typeChainReturnType) )* | void

typeChainElement ::= type | '(' typeChain ')'

typeChainReturnType ::= typeChainElement | void

returnType ::= complexType | void

objectType ::= qualifiedName typeArguments?

primitiveType ::=  any | bool | int | float | string

boolValue ::= true | false

ArrayQualifier ::= '[' ']'

qualifiedName ::= ID ('.' ID)*

typeParameters ::= '<' ID ( ',' ID )* '>'

typeArguments ::= '<' returnType ( ',' returnType )* '>'

annotations ::= annotation+

annotation ::= '@' ID (PL annotationParameters? PR)?

annotationParameters ::= annotationValue | annotationParameter ( ',' annotationParameter )*

annotationParameter ::= ID '=' annotationValue

annotationValue	::= null | boolValue | intValue | floatValue | stringValue
